#!/usr/bin/env python3
"""
Claude Enhancement Framework Setup Script
Interactive deployment of CLAUDE optimization system

Brings 98.5% boot improvement, pattern-first development, and automated
learning systems to any project with simple ./setup command.

Author: Christian
Version: 1.0.0
"""

import argparse
import os
import sys
import time
import platform
from pathlib import Path


def _basic_path_validation(user_path: str, default_path: Path, purpose: str) -> Path:
    """
    Basic path validation fallback when PathManager is not available.
    
    Args:
        user_path: User-provided path
        default_path: Default path to use if validation fails
        purpose: Purpose of the directory (for messages)
        
    Returns:
        Validated Path object (either user input or safe default)
    """
    try:
        path_obj = Path(user_path).expanduser().resolve()
        
        # Check if path exists, create if needed
        if not path_obj.exists():
            response = input(f"Directory '{path_obj}' does not exist. Create it? [y/N]: ").strip().lower()
            if response in ['y', 'yes']:
                try:
                    path_obj.mkdir(parents=True, exist_ok=True)
                    print(f"‚úÖ Created directory: {path_obj}")
                except Exception as e:
                    print(f"‚ùå Cannot create directory '{path_obj}': {e}")
                    if default_path:
                        print(f"   Using default instead: {default_path}")
                        return default_path
                    else:
                        return Path.cwd()
            else:
                if default_path:
                    print(f"   Using default instead: {default_path}")
                    return default_path
                else:
                    return Path.cwd()
        
        # Check if it's a directory
        if path_obj.exists() and not path_obj.is_dir():
            print(f"‚ùå Path '{path_obj}' exists but is not a directory")
            if default_path:
                print(f"   Using default instead: {default_path}")
                return default_path
            else:
                return Path.cwd()
        
        # Check write permissions
        if not os.access(path_obj, os.W_OK):
            print(f"‚ùå Directory '{path_obj}' is not writable")
            if default_path:
                print(f"   Using default instead: {default_path}")
                return default_path
            else:
                return Path.cwd()
        
        print(f"‚úÖ {purpose.capitalize()} directory validated: {path_obj}")
        return path_obj
        
    except Exception as e:
        print(f"‚ùå Invalid path '{user_path}': {e}")
        if default_path:
            print(f"   Using default instead: {default_path}")
            return default_path
        else:
            return Path.cwd()


def check_requirements():
    """Check system requirements."""
    print("üîç Checking system requirements...")
    
    # Check Python version
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ required. Current version:", sys.version)
        return False
    
    # Check platform
    current_platform = platform.system()
    if current_platform not in ["Darwin", "Linux", "Windows"]:
        print(f"‚ö†Ô∏è  Platform '{current_platform}' not officially supported")
        print("   Supported: macOS, Linux, Windows (WSL recommended)")
    
    print(f"‚úÖ Python {sys.version.split()[0]} on {current_platform}")
    return True


def interactive_setup():
    """Interactive setup configuration with comprehensive path validation."""
    print("\nüéØ Claude Enhancement Framework Configuration")
    print("=" * 50)
    
    # Get user information
    default_username = os.getenv("USER") or os.getenv("USERNAME") or "user"
    username = input(f"Username [{default_username}]: ").strip() or default_username
    
    # Get project information (if in project directory)
    current_dir = Path.cwd()
    project_name = input(f"Project name [{current_dir.name}]: ").strip() or current_dir.name
    
    # Initialize PathManager for validation
    try:
        from claude_enhancer.core.path_manager import PathManager
        path_manager = PathManager(username=username, project_name=project_name)
    except ImportError:
        print("‚ö†Ô∏è  Path validation system not available, using basic validation")
        path_manager = None
    
    # File destination configuration
    print("\nüìÅ File Destination Configuration:")
    
    # CLAUDE.md file destination prompt with validation
    claude_md_dest = input(f"Where do you want the project-specific CLAUDE.md file? [{current_dir}]: ").strip()
    if not claude_md_dest:
        claude_md_path = current_dir
        print(f"‚úÖ Using current directory: {claude_md_path}")
    else:
        if path_manager:
            claude_md_path = path_manager.get_safe_directory_path(
                claude_md_dest, 
                current_dir, 
                "project CLAUDE.md"
            )
        else:
            # Fallback to basic validation
            claude_md_path = _basic_path_validation(claude_md_dest, current_dir, "project CLAUDE.md")
    
    # Custom installation directory selection with validation
    custom_install_dir = input(f"Custom installation directory (optional, default: use standard locations): ").strip()
    if custom_install_dir:
        if path_manager:
            is_valid, errors, validated_path = path_manager.validate_installation_directory(
                custom_install_dir, 
                "custom installation"
            )
            if is_valid and validated_path:
                custom_install_path = validated_path
                print(f"‚úÖ Custom installation directory validated: {custom_install_path}")
            else:
                print(f"‚ùå Custom installation directory validation failed:")
                for error in errors:
                    print(f"   - {error}")
                custom_install_path = None
                print("   Using standard installation locations instead")
        else:
            # Fallback to basic validation
            custom_install_path = _basic_path_validation(custom_install_dir, None, "custom installation")
    else:
        custom_install_path = None
    
    # Deployment options
    print("\nüì¶ Deployment Options:")
    print("1. Global only (deploy to ~/.claude/)")
    print("2. Project only (deploy to current directory)")
    print("3. Both global and project (recommended)")
    
    while True:
        choice = input("Choose deployment [3]: ").strip() or "3"
        if choice in ["1", "2", "3"]:
            break
        print("Please enter 1, 2, or 3")
    
    deploy_global = choice in ["1", "3"]
    deploy_project = choice in ["2", "3"]
    
    # Operational Scripts Configuration
    print("\nüîß Operational Scripts Configuration:")
    print("Deploy comprehensive operational toolkit including:")
    print("  ‚Ä¢ Backup automation (120-minute daemon)")
    print("  ‚Ä¢ Development tools (checkpoint, cleanup)")
    print("  ‚Ä¢ Monitoring systems (performance, token usage)")
    print("  ‚Ä¢ Management utilities (session handling)")
    
    deploy_ops = input("Deploy operational scripts? [Y/n]: ").strip().lower()
    deploy_operational_scripts = deploy_ops != 'n'
    
    ops_install_path = None
    if deploy_operational_scripts:
        print("\nüìÅ Operational Scripts Installation:")
        print("1. User local (~/.local/bin) - accessible system-wide")
        print("2. Project scripts directory - project-specific")
        print("3. Custom directory")
        
        ops_choice = input("Choose installation location [1]: ").strip() or "1"
        
        if ops_choice == "1":
            ops_install_path = Path.home() / ".local" / "bin"
        elif ops_choice == "2":
            ops_install_path = claude_md_path / "scripts"
        elif ops_choice == "3":
            custom_ops_path = input("Enter custom operational scripts directory: ").strip()
            if custom_ops_path:
                if path_manager:
                    ops_install_path = path_manager.get_safe_directory_path(
                        custom_ops_path, None, "operational scripts"
                    )
                else:
                    ops_install_path = _basic_path_validation(custom_ops_path, Path.home() / ".local" / "bin", "operational scripts")
            else:
                ops_install_path = Path.home() / ".local" / "bin"
    
    # Performance options
    print("\n‚ö° Performance Configuration:")
    session_lines = input("Session continuity lines [750]: ").strip() or "750"
    cache_target = input("Cache hit rate target [0.90]: ").strip() or "0.90"
    
    return {
        "username": username,
        "project_name": project_name,
        "deploy_global": deploy_global,
        "deploy_project": deploy_project,
        "session_lines": int(session_lines),
        "cache_target": float(cache_target),
        "claude_md_path": claude_md_path,
        "custom_install_path": custom_install_path,
        "deploy_operational_scripts": deploy_operational_scripts,
        "ops_install_path": ops_install_path
    }


def discover_operational_scripts():
    """Discover and categorize operational scripts from framework directory."""
    framework_dir = Path(__file__).parent.absolute()
    scripts_dir = framework_dir / "scripts"
    
    if not scripts_dir.exists():
        print(f"‚ö†Ô∏è  Framework scripts directory not found: {scripts_dir}")
        return {}
    
    script_categories = {
        "automation": [],
        "backup": [],
        "development": [],
        "monitoring": [],
        "management": []
    }
    
    # Categorize scripts based on filename patterns and functionality
    automation_patterns = ["auto_", "daemon", "service", "install_"]
    backup_patterns = ["backup", "archive", "restore"]
    development_patterns = ["checkpoint", "test_", "validate", "demo"]
    monitoring_patterns = ["monitor", "status", "performance", "token_usage"]
    management_patterns = ["cleanup", "handoff", "session", "continue", "start_", "setup_"]
    
    for script_file in scripts_dir.iterdir():
        if script_file.is_file() and (script_file.suffix in ['.sh', '.py'] or script_file.name in ['checkpoint', 'cleanup']):
            script_name = script_file.name.lower()
            categorized = False
            
            # Check each category
            for pattern in automation_patterns:
                if pattern in script_name:
                    script_categories["automation"].append(script_file)
                    categorized = True
                    break
            
            if not categorized:
                for pattern in backup_patterns:
                    if pattern in script_name:
                        script_categories["backup"].append(script_file)
                        categorized = True
                        break
            
            if not categorized:
                for pattern in development_patterns:
                    if pattern in script_name:
                        script_categories["development"].append(script_file)
                        categorized = True
                        break
            
            if not categorized:
                for pattern in monitoring_patterns:
                    if pattern in script_name:
                        script_categories["monitoring"].append(script_file)
                        categorized = True
                        break
            
            if not categorized:
                for pattern in management_patterns:
                    if pattern in script_name:
                        script_categories["management"].append(script_file)
                        categorized = True
                        break
            
            # If still not categorized, add to management as default
            if not categorized:
                script_categories["management"].append(script_file)
    
    return script_categories


def deploy_operational_scripts(config, total_metrics):
    """Deploy operational scripts to specified location."""
    if not config.get("deploy_operational_scripts", False):
        return {"success": True, "message": "Operational scripts deployment skipped"}
    
    print("\nüîß Deploying Operational Scripts...")
    start_time = time.time()
    
    # Discover available scripts
    script_categories = discover_operational_scripts()
    total_scripts = sum(len(scripts) for scripts in script_categories.values())
    
    if total_scripts == 0:
        return {"success": False, "errors": ["No operational scripts found to deploy"]}
    
    print(f"üìä Found {total_scripts} operational scripts across {len(script_categories)} categories")
    
    # Prepare installation directory
    install_path = Path(config["ops_install_path"])
    install_path.mkdir(parents=True, exist_ok=True)
    
    if not install_path.exists() or not install_path.is_dir():
        return {"success": False, "errors": [f"Cannot create installation directory: {install_path}"]}
    
    deployed_scripts = []
    deployment_errors = []
    scripts_made_executable = []
    aliases_created = []
    
    # Deploy scripts by category
    for category, scripts in script_categories.items():
        if not scripts:
            continue
            
        print(f"\nüì¶ Deploying {category} scripts ({len(scripts)} files)...")
        
        for script_file in scripts:
            try:
                # Determine target filename
                target_name = script_file.name
                
                # For key scripts, create simple command names
                if script_file.name == "checkpoint_enhanced.py":
                    # Also create a 'checkpoint-enhanced' command
                    target_enhanced = install_path / "checkpoint-enhanced"
                    create_python_wrapper(script_file, target_enhanced)
                    deployed_scripts.append(target_enhanced)
                elif script_file.name == "cleanup":
                    target_name = "claude-cleanup"
                elif script_file.name == "checkpoint":
                    target_name = "claude-checkpoint"
                
                target_path = install_path / target_name
                
                # Copy script file
                import shutil
                shutil.copy2(script_file, target_path)
                
                # Make executable
                target_path.chmod(0o755)
                scripts_made_executable.append(str(target_path))
                deployed_scripts.append(target_path)
                
                print(f"  ‚úÖ {script_file.name} ‚Üí {target_path.name}")
                
            except Exception as e:
                error_msg = f"Failed to deploy {script_file.name}: {e}"
                deployment_errors.append(error_msg)
                print(f"  ‚ùå {error_msg}")
    
    # Create convenience aliases for key commands
    key_aliases = {
        "claude-checkpoint": ["checkpoint", "cp"],
        "claude-cleanup": ["cleanup", "clean"],
        "backup_daemon.py": ["claude-backup"],
        "session_restore.py": ["claude-restore"]
    }
    
    # Update PATH if installing to ~/.local/bin
    if str(install_path) == str(Path.home() / ".local" / "bin"):
        setup_user_path_if_needed()
    
    deployment_time = time.time() - start_time
    
    # Update total metrics
    total_metrics["files_created"] += len(deployed_scripts)
    total_metrics["scripts_deployed"] = len(deployed_scripts)
    total_metrics["script_categories"] = len([cat for cat, scripts in script_categories.items() if scripts])
    
    return {
        "success": len(deployment_errors) == 0,
        "deployment_time": deployment_time,
        "scripts_deployed": len(deployed_scripts),
        "scripts_made_executable": len(scripts_made_executable),
        "deployment_errors": deployment_errors,
        "deployed_scripts": [str(path) for path in deployed_scripts],
        "script_categories": {cat: len(scripts) for cat, scripts in script_categories.items() if scripts},
        "install_path": str(install_path)
    }


def create_python_wrapper(source_script, target_path):
    """Create a shell wrapper for Python scripts."""
    wrapper_content = f"""#!/bin/bash
# Auto-generated wrapper for {source_script.name}
# Created by Claude Enhancement Framework Setup

python3 "{source_script}" "$@"
"""
    
    target_path.write_text(wrapper_content)
    target_path.chmod(0o755)


def setup_user_path_if_needed():
    """Ensure ~/.local/bin is in user's PATH."""
    local_bin = Path.home() / ".local" / "bin"
    
    # Check if already in PATH
    current_path = os.environ.get('PATH', '')
    if str(local_bin) in current_path:
        print("‚úÖ ~/.local/bin already in PATH")
        return
    
    # Add to shell profile
    shell_profiles = ['.bashrc', '.zshrc', '.profile']
    
    for profile_name in shell_profiles:
        profile_path = Path.home() / profile_name
        if profile_path.exists():
            # Check if PATH export already exists
            profile_content = profile_path.read_text()
            if '.local/bin' not in profile_content:
                with profile_path.open('a') as f:
                    f.write(f'\n# Added by Claude Enhancement Framework\nexport PATH="$HOME/.local/bin:$PATH"\n')
                print(f"‚úÖ Added ~/.local/bin to PATH in {profile_name}")
            break
    else:
        # Create .profile if no shell profile exists
        profile_path = Path.home() / '.profile'
        with profile_path.open('w') as f:
            f.write('# Created by Claude Enhancement Framework\nexport PATH="$HOME/.local/bin:$PATH"\n')
        print("‚úÖ Created .profile and added ~/.local/bin to PATH")


def setup_framework(args=None):
    """Main setup process."""
    start_time = time.time()
    
    print("üöÄ Claude Enhancement Framework Setup")
    print("Bringing 98.5% boot improvement to your Claude experience")
    print("=" * 60)
    
    # Check requirements
    if not check_requirements():
        sys.exit(1)
    
    # Add framework to Python path
    framework_dir = Path(__file__).parent.resolve()
    if str(framework_dir) not in sys.path:
        sys.path.insert(0, str(framework_dir))
    
    try:
        from claude_enhancer import ClaudeEnhancer
    except ImportError as e:
        print(f"‚ùå Failed to import Claude Enhancement Framework: {e}")
        print(f"   Framework directory: {framework_dir}")
        sys.exit(1)
    
    # Interactive configuration
    config = interactive_setup()
    
    # Initialize framework
    print(f"\nüîß Initializing framework for {config['username']}...")
    enhancer = ClaudeEnhancer(
        username=config["username"],
        project_name=config["project_name"]
    )
    
    # Configure performance settings
    enhancer.config.performance.session_continuity_lines = config["session_lines"]
    enhancer.config.performance.cache_hit_target = config["cache_target"]
    
    # Display deployment preview and get confirmation
    print(f"\nüîç Analyzing deployment requirements...")
    should_proceed = enhancer.display_deployment_preview(
        deploy_global=config["deploy_global"],
        deploy_project=config["deploy_project"],
        project_path=config['claude_md_path'],
        force=args.force if args else False
    )
    
    if not should_proceed:
        print(f"\n‚ùå Deployment cancelled by user")
        return
    
    total_files_created = 0
    total_dirs_created = 0
    total_metrics = {
        "files_created": 0,
        "scripts_deployed": 0,
        "script_categories": 0
    }
    
    # Deploy global configuration
    if config["deploy_global"]:
        print("\nüìÇ Deploying global configuration...")
        global_results = enhancer.deploy_global_configuration(force=args.force if args else False)
        
        if global_results["success"]:
            print(f"‚úÖ Global deployment successful ({global_results['deployment_time']:.3f}s)")
            print(f"   Files created: {len(global_results['files_created'])}")
            for file_path in global_results['files_created']:
                print(f"   üìÑ {file_path}")
            total_files_created += len(global_results['files_created'])
        else:
            print("‚ùå Global deployment failed:")
            for error in global_results["errors"]:
                print(f"   {error}")
    
    # Deploy project configuration
    if config["deploy_project"]:
        print(f"\nüìÅ Deploying project configuration...")
        project_results = enhancer.deploy_project_configuration(force=args.force if args else False, project_path=config['claude_md_path'])
        
        if project_results["success"]:
            print(f"‚úÖ Project deployment successful ({project_results['deployment_time']:.3f}s)")
            print(f"   Files created: {len(project_results['files_created'])}")
            print(f"   Directories created: {len(project_results['directories_created'])}")
            
            for dir_path in project_results['directories_created']:
                print(f"   üìÅ {dir_path}")
            for file_path in project_results['files_created']:
                print(f"   üìÑ {file_path}")
            
            total_files_created += len(project_results['files_created'])
            total_dirs_created += len(project_results['directories_created'])
        else:
            print("‚ùå Project deployment failed:")
            for error in project_results["errors"]:
                print(f"   {error}")
    
    # Deploy operational scripts
    operational_results = deploy_operational_scripts(config, total_metrics)
    if operational_results["success"] and config.get("deploy_operational_scripts", False):
        print(f"‚úÖ Operational scripts deployment successful ({operational_results['deployment_time']:.3f}s)")
        print(f"   Scripts deployed: {operational_results['scripts_deployed']}")
        print(f"   Categories: {operational_results['script_categories']}")
        print(f"   Installation path: {operational_results['install_path']}")
        
        # Show deployed script categories
        for category, count in operational_results['script_categories'].items():
            if count > 0:
                print(f"   üì¶ {category}: {count} scripts")
        
        total_files_created += operational_results['scripts_deployed']
    elif not operational_results["success"] and config.get("deploy_operational_scripts", False):
        print("‚ùå Operational scripts deployment failed:")
        for error in operational_results["deployment_errors"]:
            print(f"   {error}")
    
    # Initialize framework
    print("\nüéØ Initializing optimization systems...")
    init_results = enhancer.initialize_framework()
    
    if init_results["success"]:
        print(f"‚úÖ Framework initialization successful ({init_results['boot_time']:.3f}s)")
        print(f"   Boot time: {init_results['boot_time']:.3f}s")
        
        if init_results['boot_time'] < 0.0066:  # 6.6ms target
            improvement = (1 - init_results['boot_time'] / 0.6491) * 100
            print(f"   üöÄ {improvement:.1f}% boot improvement achieved!")
        
        print(f"   Global config: {'‚úÖ' if init_results['global_config_loaded'] else '‚ùå'}")
        print(f"   Project config: {'‚úÖ' if init_results['project_config_loaded'] else '‚ùå'}")
        print(f"   Optimizations: {len(init_results['performance_optimizations'])}")
        
        for opt in init_results["performance_optimizations"]:
            print(f"   ‚ö° {opt}")
        
        if "warnings" in init_results:
            print("   Warnings:")
            for warning in init_results["warnings"]:
                print(f"   ‚ö†Ô∏è  {warning}")
    else:
        print("‚ùå Framework initialization failed:")
        for error in init_results["errors"]:
            print(f"   {error}")
    
    # Summary
    setup_time = time.time() - start_time
    print("\n" + "=" * 60)
    print("üéâ Claude Enhancement Framework Setup Complete!")
    print(f"   Total time: {setup_time:.2f}s")
    print(f"   Files created: {total_files_created}")
    print(f"   Directories created: {total_dirs_created}")
    if config.get("deploy_operational_scripts", False):
        print(f"   Operational scripts: {total_metrics.get('scripts_deployed', 0)} deployed")
        print(f"   Script categories: {total_metrics.get('script_categories', 0)} categories")
    print(f"   User: {config['username']}")
    print(f"   Project: {config['project_name']}")
    
    # Next steps
    print("\nüìã Next Steps:")
    step_num = 1
    if config["deploy_global"]:
        print(f"   {step_num}. Restart Claude Code to load global configuration")
        step_num += 1
    if config["deploy_project"]:
        print(f"   {step_num}. Use 'boot' or 'setup' commands in Claude for project initialization")
        step_num += 1
    if config.get("deploy_operational_scripts", False):
        print(f"   {step_num}. Open new terminal or run 'source ~/.profile' to access operational commands")
        step_num += 1
        print(f"   {step_num}. Try commands: claude-checkpoint, claude-cleanup, backup_daemon.py --help")
        step_num += 1
    print(f"   {step_num}. Enjoy 98.5% faster Claude experience with operational toolkit!")
    
    # Operational tools guidance
    if config.get("deploy_operational_scripts", False):
        print("\nüîß Operational Tools Available:")
        print("   ‚Ä¢ claude-checkpoint - Enhanced checkpoint system")
        print("   ‚Ä¢ claude-cleanup - Project cleanup automation") 
        print("   ‚Ä¢ backup_daemon.py - 120-minute backup automation")
        print("   ‚Ä¢ session_restore.py - Session state restoration")
        print("   ‚Ä¢ Performance monitoring and token usage tools")
        print(f"   ‚Ä¢ All tools installed in: {operational_results.get('install_path', 'installation path')}")
    
    print("\nüìñ Documentation:")
    print("   Framework guide: https://github.com/your-username/claude-enhancement-framework")
    print("   Pattern reference: docs/PATTERNS.md")
    print("   Performance benchmarks: docs/BENCHMARKS.md")
    if config.get("deploy_operational_scripts", False):
        print("   Operational scripts: Run any script with --help for usage information")
    
    print(f"\nüöÄ Framework ready! Your Claude experience is now optimized with complete operational toolkit.")


if __name__ == "__main__":
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Claude Enhancement Framework Setup Script")
    parser.add_argument("--force", action="store_true", help="Force installation without confirmation prompts")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose output")
    args = parser.parse_args(sys.argv[1:])
    
    try:
        setup_framework(args)
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)