#!/usr/bin/env python3
"""
Claude Enhancement Framework Setup Script
Interactive deployment of CLAUDE optimization system

Brings 98.5% boot improvement, pattern-first development, and automated
learning systems to any project with simple ./setup command.

Author: Christian
Version: 1.0.0
"""

import argparse
import os
import sys
import time
import platform
from pathlib import Path


def _basic_path_validation(user_path: str, default_path: Path, purpose: str) -> Path:
    """
    Basic path validation fallback when PathManager is not available.
    
    Args:
        user_path: User-provided path
        default_path: Default path to use if validation fails
        purpose: Purpose of the directory (for messages)
        
    Returns:
        Validated Path object (either user input or safe default)
    """
    try:
        path_obj = Path(user_path).expanduser().resolve()
        
        # Check if path exists, create if needed
        if not path_obj.exists():
            response = input(f"Directory '{path_obj}' does not exist. Create it? [y/N]: ").strip().lower()
            if response in ['y', 'yes']:
                try:
                    path_obj.mkdir(parents=True, exist_ok=True)
                    print(f"‚úÖ Created directory: {path_obj}")
                except Exception as e:
                    print(f"‚ùå Cannot create directory '{path_obj}': {e}")
                    if default_path:
                        print(f"   Using default instead: {default_path}")
                        return default_path
                    else:
                        return Path.cwd()
            else:
                if default_path:
                    print(f"   Using default instead: {default_path}")
                    return default_path
                else:
                    return Path.cwd()
        
        # Check if it's a directory
        if path_obj.exists() and not path_obj.is_dir():
            print(f"‚ùå Path '{path_obj}' exists but is not a directory")
            if default_path:
                print(f"   Using default instead: {default_path}")
                return default_path
            else:
                return Path.cwd()
        
        # Check write permissions
        if not os.access(path_obj, os.W_OK):
            print(f"‚ùå Directory '{path_obj}' is not writable")
            if default_path:
                print(f"   Using default instead: {default_path}")
                return default_path
            else:
                return Path.cwd()
        
        print(f"‚úÖ {purpose.capitalize()} directory validated: {path_obj}")
        return path_obj
        
    except Exception as e:
        print(f"‚ùå Invalid path '{user_path}': {e}")
        if default_path:
            print(f"   Using default instead: {default_path}")
            return default_path
        else:
            return Path.cwd()


def check_requirements():
    """Check system requirements."""
    print("üîç Checking system requirements...")
    
    # Check Python version
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ required. Current version:", sys.version)
        return False
    
    # Check platform
    current_platform = platform.system()
    if current_platform not in ["Darwin", "Linux", "Windows"]:
        print(f"‚ö†Ô∏è  Platform '{current_platform}' not officially supported")
        print("   Supported: macOS, Linux, Windows (WSL recommended)")
    
    print(f"‚úÖ Python {sys.version.split()[0]} on {current_platform}")
    return True


def interactive_setup():
    """Interactive setup configuration with comprehensive path validation."""
    print("\nüéØ Claude Enhancement Framework Configuration")
    print("=" * 50)
    
    # Get user information
    default_username = os.getenv("USER") or os.getenv("USERNAME") or "user"
    username = input(f"Username [{default_username}]: ").strip() or default_username
    
    # Get project information (if in project directory)
    current_dir = Path.cwd()
    project_name = input(f"Project name [{current_dir.name}]: ").strip() or current_dir.name
    
    # Initialize PathManager for validation
    try:
        from claude_enhancer.core.path_manager import PathManager
        path_manager = PathManager(username=username, project_name=project_name)
    except ImportError:
        print("‚ö†Ô∏è  Path validation system not available, using basic validation")
        path_manager = None
    
    # File destination configuration
    print("\nüìÅ File Destination Configuration:")
    
    # CLAUDE.md file destination prompt with validation
    claude_md_dest = input(f"Where do you want the project-specific CLAUDE.md file? [{current_dir}]: ").strip()
    if not claude_md_dest:
        claude_md_path = current_dir
        print(f"‚úÖ Using current directory: {claude_md_path}")
    else:
        if path_manager:
            claude_md_path = path_manager.get_safe_directory_path(
                claude_md_dest, 
                current_dir, 
                "project CLAUDE.md"
            )
        else:
            # Fallback to basic validation
            claude_md_path = _basic_path_validation(claude_md_dest, current_dir, "project CLAUDE.md")
    
    # Custom installation directory selection with validation
    custom_install_dir = input(f"Custom installation directory (optional, default: use standard locations): ").strip()
    if custom_install_dir:
        if path_manager:
            is_valid, errors, validated_path = path_manager.validate_installation_directory(
                custom_install_dir, 
                "custom installation"
            )
            if is_valid and validated_path:
                custom_install_path = validated_path
                print(f"‚úÖ Custom installation directory validated: {custom_install_path}")
            else:
                print(f"‚ùå Custom installation directory validation failed:")
                for error in errors:
                    print(f"   - {error}")
                custom_install_path = None
                print("   Using standard installation locations instead")
        else:
            # Fallback to basic validation
            custom_install_path = _basic_path_validation(custom_install_dir, None, "custom installation")
    else:
        custom_install_path = None
    
    # Deployment options
    print("\nüì¶ Deployment Options:")
    print("1. Global only (deploy to ~/.claude/)")
    print("2. Project only (deploy to current directory)")
    print("3. Both global and project (recommended)")
    
    while True:
        choice = input("Choose deployment [3]: ").strip() or "3"
        if choice in ["1", "2", "3"]:
            break
        print("Please enter 1, 2, or 3")
    
    deploy_global = choice in ["1", "3"]
    deploy_project = choice in ["2", "3"]
    
    # Performance options
    print("\n‚ö° Performance Configuration:")
    session_lines = input("Session continuity lines [750]: ").strip() or "750"
    cache_target = input("Cache hit rate target [0.90]: ").strip() or "0.90"
    
    return {
        "username": username,
        "project_name": project_name,
        "deploy_global": deploy_global,
        "deploy_project": deploy_project,
        "session_lines": int(session_lines),
        "cache_target": float(cache_target),
        "claude_md_path": claude_md_path,
        "custom_install_path": custom_install_path
    }


def setup_framework(args=None):
    """Main setup process."""
    start_time = time.time()
    
    print("üöÄ Claude Enhancement Framework Setup")
    print("Bringing 98.5% boot improvement to your Claude experience")
    print("=" * 60)
    
    # Check requirements
    if not check_requirements():
        sys.exit(1)
    
    # Add framework to Python path
    framework_dir = Path(__file__).parent.resolve()
    if str(framework_dir) not in sys.path:
        sys.path.insert(0, str(framework_dir))
    
    try:
        from claude_enhancer import ClaudeEnhancer
    except ImportError as e:
        print(f"‚ùå Failed to import Claude Enhancement Framework: {e}")
        print(f"   Framework directory: {framework_dir}")
        sys.exit(1)
    
    # Interactive configuration
    config = interactive_setup()
    
    # Initialize framework
    print(f"\nüîß Initializing framework for {config['username']}...")
    enhancer = ClaudeEnhancer(
        username=config["username"],
        project_name=config["project_name"]
    )
    
    # Configure performance settings
    enhancer.config.performance.session_continuity_lines = config["session_lines"]
    enhancer.config.performance.cache_hit_target = config["cache_target"]
    
    # Display deployment preview and get confirmation
    print(f"\nüîç Analyzing deployment requirements...")
    should_proceed = enhancer.display_deployment_preview(
        deploy_global=config["deploy_global"],
        deploy_project=config["deploy_project"],
        project_path=config['claude_md_path']
    )
    
    if not should_proceed:
        print(f"\n‚ùå Deployment cancelled by user")
        return
    
    total_files_created = 0
    total_dirs_created = 0
    
    # Deploy global configuration
    if config["deploy_global"]:
        print("\nüìÇ Deploying global configuration...")
        global_results = enhancer.deploy_global_configuration(force=args.force if args else False)
        
        if global_results["success"]:
            print(f"‚úÖ Global deployment successful ({global_results['deployment_time']:.3f}s)")
            print(f"   Files created: {len(global_results['files_created'])}")
            for file_path in global_results['files_created']:
                print(f"   üìÑ {file_path}")
            total_files_created += len(global_results['files_created'])
        else:
            print("‚ùå Global deployment failed:")
            for error in global_results["errors"]:
                print(f"   {error}")
    
    # Deploy project configuration
    if config["deploy_project"]:
        print(f"\nüìÅ Deploying project configuration...")
        project_results = enhancer.deploy_project_configuration(force=args.force if args else False, project_path=config['claude_md_path'])
        
        if project_results["success"]:
            print(f"‚úÖ Project deployment successful ({project_results['deployment_time']:.3f}s)")
            print(f"   Files created: {len(project_results['files_created'])}")
            print(f"   Directories created: {len(project_results['directories_created'])}")
            
            for dir_path in project_results['directories_created']:
                print(f"   üìÅ {dir_path}")
            for file_path in project_results['files_created']:
                print(f"   üìÑ {file_path}")
            
            total_files_created += len(project_results['files_created'])
            total_dirs_created += len(project_results['directories_created'])
        else:
            print("‚ùå Project deployment failed:")
            for error in project_results["errors"]:
                print(f"   {error}")
    
    # Initialize framework
    print("\nüéØ Initializing optimization systems...")
    init_results = enhancer.initialize_framework()
    
    if init_results["success"]:
        print(f"‚úÖ Framework initialization successful ({init_results['boot_time']:.3f}s)")
        print(f"   Boot time: {init_results['boot_time']:.3f}s")
        
        if init_results['boot_time'] < 0.0066:  # 6.6ms target
            improvement = (1 - init_results['boot_time'] / 0.6491) * 100
            print(f"   üöÄ {improvement:.1f}% boot improvement achieved!")
        
        print(f"   Global config: {'‚úÖ' if init_results['global_config_loaded'] else '‚ùå'}")
        print(f"   Project config: {'‚úÖ' if init_results['project_config_loaded'] else '‚ùå'}")
        print(f"   Optimizations: {len(init_results['performance_optimizations'])}")
        
        for opt in init_results["performance_optimizations"]:
            print(f"   ‚ö° {opt}")
        
        if "warnings" in init_results:
            print("   Warnings:")
            for warning in init_results["warnings"]:
                print(f"   ‚ö†Ô∏è  {warning}")
    else:
        print("‚ùå Framework initialization failed:")
        for error in init_results["errors"]:
            print(f"   {error}")
    
    # Summary
    setup_time = time.time() - start_time
    print("\n" + "=" * 60)
    print("üéâ Claude Enhancement Framework Setup Complete!")
    print(f"   Total time: {setup_time:.2f}s")
    print(f"   Files created: {total_files_created}")
    print(f"   Directories created: {total_dirs_created}")
    print(f"   User: {config['username']}")
    print(f"   Project: {config['project_name']}")
    
    # Next steps
    print("\nüìã Next Steps:")
    if config["deploy_global"]:
        print("   1. Restart Claude Code to load global configuration")
    if config["deploy_project"]:
        print("   2. Use 'boot' or 'setup' commands in Claude for project initialization")
    print("   3. Enjoy 98.5% faster Claude experience!")
    
    print("\nüìñ Documentation:")
    print("   Framework guide: https://github.com/your-username/claude-enhancement-framework")
    print("   Pattern reference: docs/PATTERNS.md")
    print("   Performance benchmarks: docs/BENCHMARKS.md")
    
    print(f"\nüöÄ Framework ready! Your Claude experience is now optimized.")


if __name__ == "__main__":
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Claude Enhancement Framework Setup Script")
    parser.add_argument("--force", action="store_true", help="Force installation without confirmation prompts")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose output")
    args = parser.parse_args(sys.argv[1:])
    
    try:
        setup_framework(args)
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)